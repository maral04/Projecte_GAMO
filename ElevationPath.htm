<!DOCTYPE html>
<html>
	<head>
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
	<title>Google Maps JavaScript API v3 Example: Elevation Along Paths</title>
	<link href="http://code.google.com/apis/maps/documentation/javascript/examples/default.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript" src="http://www.google.com/jsapi"></script> 
	<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
	<script type="text/javascript">
		var elSvc;
		var map;
		var chart;
		var polyline;
		var path = new Array();			
		
	// Load the Visualization API and the columnchart package.
	google.load("visualization", "1", {packages: ["columnchart"]});

	function initialize() {
		//Posició inicial.
		var myLatlng = new google.maps.LatLng(41.6089512,2.2870096); //Coord: Educem.
		var myOptions = {
			zoom: 8,
			center: myLatlng,			
			//mapTypeId: google.maps.MapTypeId.TERRAIN,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			draggable:true
		}

		map = new google.maps.Map(document.getElementById("map"), myOptions);  

		// Create a new chart in the elevation_chart DIV.
		chart = new google.visualization.ColumnChart(document.getElementById('elevation_chart'));

		//Create an ElevationService.
		elSvc = new google.maps.ElevationService();
		
		google.maps.event.addListener(map, 'click', function(event){														
			calculTot();
		});		

		/*
		google.maps.event.addListener(map, 'rightclick', function(event){								
			plottingComplete(event.latLng);
		});*/
	}
	
	function calculTot(){
		//Crea el marker per primer cop
		var marker = new google.maps.Marker({
			//position: new google.maps.LatLng( 41.7052220,2.4328690),
			map: map,
			title: 'GAMO Marker!'
		});	
		
		//Llegeix l'XML
		// ******************
		doc = File.open("rico.gpx");
		detectaTRK();
		File.close();		
		
		/*
		marker.position = new google.maps.LatLng( 41.7052100,2.4327210),						
		
		plotPoints(marker.position);*/
		
		
		//plottingComplete(event.latLng);	
		//addTrackpointsToMap();
	
	}
	
	
	//COPYSTART
	
	
	detectaTRK = function() {
		var tracks = doc.documentElement.getElementsByTagName("trk");
		for(var i = 0; i < tracks.length; i++) {
			detectaTRKSEG(tracks[i]);
		}
	}
	
	detectaTRKSEG = function(track) {
		var segments = track.getElementsByTagName("trkseg");
		for(var i = 0; i < segments.length; i++) {
			var segmentlatlngbounds = detectaTRKPT(segments[i]);
		}
	}
	
	detectaTRKPT = function(trackSegment) {
		var trackpoints = trackSegment.getElementsByTagName("trkpt");
		console.log(trackpoints);
		if(trackpoints.length == 0) {			
			return;
		}else{
			console.log();
		}
	}
/*
    var pointarray = [];

    // process first point
    var lastlon = parseFloat(trackpoints[0].getAttribute("lon"));
    var lastlat = parseFloat(trackpoints[0].getAttribute("lat"));

    var latlng = new google.maps.LatLng(lastlat,lastlon);
    pointarray.push(latlng);

    for(var i = 1; i < trackpoints.length; i++) {
        var lon = parseFloat(trackpoints[i].getAttribute("lon"));
        var lat = parseFloat(trackpoints[i].getAttribute("lat"));

        // Verify that this is far enough away from the last point to be used.
        var latdiff = lat - lastlat;
        var londiff = lon - lastlon;
        if(Math.sqrt(latdiff*latdiff + londiff*londiff)
            > this.mintrackpointdelta) {
            lastlon = lon;
            lastlat = lat;
            latlng = new google.maps.LatLng(lat,lon);
            pointarray.push(latlng);
        }

    }

    var polyline = new google.maps.Polyline({
        path: pointarray,
        strokeColor: colour,
        strokeWeight: width,
        map: this.map
    });

    // Create an ElevationService.
    var elevator = new google.maps.ElevationService;

    elevator.getElevationAlongPath({
        'path': pointarray,
        'samples': 100
    }, plotElevation);*/

	
	
	//COPYENDS
	
	
	
	//Funció guay.
	function plotPoints(theLatLng){
		path.push(theLatLng);		

		//display
		marker = new google.maps.Marker({
			position: theLatLng,
			map: map
		});
	}

	function plottingComplete(theLatLng){
		path.push(theLatLng);

		//display
		marker = new google.maps.Marker({
		position: theLatLng,
		map:map
		});	

		//display a polyline
		var pathOptions = {
			path: path,
			strokeColor: '#0000CC',
			opacity: 0.4,
			map: map
		}
		
		polyline = new google.maps.Polyline(pathOptions);

		//request
		var pathRequest = {
			'path': path,
			'samples': 256
		}

		//Iniciar
		elSvc.getElevationAlongPath(pathRequest, plotElevation);
	}              
	
	// Takes an array of ElevationResult objects, draws the path on the map
	// and plots the elevation profile on a Visualization API ColumnChart.
	function plotElevation(results, status) {
		if (status == google.maps.ElevationStatus.OK) {
			elevations = results;

			// Extract the data from which to populate the chart.
			// Because the samples are equidistant, the 'Sample'
			// column here does double duty as distance along the
			// X axis.
			var data = new google.visualization.DataTable();
			data.addColumn('string', 'Sample');
			data.addColumn('number', 'Elevation');

			for (var i = 0; i < results.length; i++) {
				data.addRow(['', elevations[i].elevation]);
			}

			// Draw the chart using the data within its DIV. 
			document.getElementById('elevation_chart').style.display = 'block';
			chart.draw(data, {
				width: 640,
				height: 200,
				legend: 'none',
				titleY: 'Elevation (m)'
			});
		}
	}  
	</script>
	</head>
	<body style="margin:0px; padding:0px;" onload="initialize();">
		<div>
			<div id="map" style="position:relative;width:640px; height:400px; border: 1px solid black;"></div>			
			<div id="elevation_chart" style="width:640px; height:200px; "></div>
		</div>
	</body>
</html>